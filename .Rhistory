# ITT of assignment on financial_knowledge_score with heteroskedasticity-robust SEs
# 1) Load data sitting in the same folder as this .qmd
#    (base R read.csv also works if you prefer)
library(readr)
df <- read_csv("financial.csv")
# 2) Make sure assignment is numeric/binary (0/1)
df$assignment <- as.numeric(df$assignment)
# 3) Fit the ITT model (difference in means by randomized assignment)
m_itt <- lm(financial_knowledge_score ~ assignment, data = df)
# 4) Robust inference (HC1)
library(sandwich)
library(lmtest)
install.packages("lmtest")
# ITT of assignment on financial_knowledge_score with heteroskedasticity-robust SEs
# 1) Load data sitting in the same folder as this .qmd
#    (base R read.csv also works if you prefer)
library(readr)
df <- read_csv("financial.csv")
# 2) Make sure assignment is numeric/binary (0/1)
df$assignment <- as.numeric(df$assignment)
# 3) Fit the ITT model (difference in means by randomized assignment)
m_itt <- lm(financial_knowledge_score ~ assignment, data = df)
# 4) Robust inference (HC1)
library(sandwich)
library(lmtest)
vc <- vcovHC(m_itt, type = "HC1")
itt_tab <- coeftest(m_itt, vcov. = vc)
print(itt_tab)
# 5) Tidy effect size, CI, and a readable sentence
b  <- coef(m_itt)["assignment"]
se <- sqrt(diag(vc))["assignment"]
z  <- qnorm(0.975)
ci <- c(b - z*se, b + z*se)
p  <- itt_tab["assignment", "Pr(>|t|)"]
cat(sprintf(
"\nITT estimate: %.3f points (robust SE = %.3f), 95%% CI [%.3f, %.3f], p = %.4f\n",
b, se, ci[1], ci[2], p))
# 6) Show group means for context (unadjusted)
library(dplyr)
df %>%
group_by(assignment) %>%
summarize(
n = n(),
mean_fin_knowledge = mean(financial_knowledge_score, na.rm = TRUE),
sd_fin_knowledge = sd(financial_knowledge_score, na.rm = TRUE),
.groups = "drop"
)
# packages
suppressPackageStartupMessages({
library(lmtest)
library(sandwich)
})
dat <- read.csv("financial.csv", stringsAsFactors = FALSE)
dat$assignment <- as.numeric(dat$assignment)
# ITT model: outcome on randomized assignment
fit_itt <- lm(financial_knowledge_score ~ assignment, data = dat)
# heteroskedasticity-robust inference (HC1)
rob_vcov <- vcovHC(fit_itt, type = "HC1")
rob_tab  <- coeftest(fit_itt, vcov. = rob_vcov)
print(rob_tab)
# extract effect and summarize
b  <- unname(coef(fit_itt)["assignment"])
se <- sqrt(diag(rob_vcov))["assignment"]
z  <- qnorm(0.975)
lo <- b - z*se
hi <- b + z*se
p  <- rob_tab["assignment", "Pr(>|t|)"]
cat("\nInterpretation (ITT of assignment on financial knowledge score):\n")
cat(
sprintf(
"I estimate that being assigned an offer to the programme increases the test score by %.2f points on average (robust SE = %.2f, 95%% CI [%.2f, %.2f], p = %.4g).\n",
b, se, lo, hi, p
)
)
grp_means <- aggregate(financial_knowledge_score ~ assignment, dat, mean)
colnames(grp_means) <- c("assignment","mean_score")
print(grp_means)
itt_d_model <- lm(programme_usage ~ assignment, data = dat)
# heteroskedasticity-robust SEs
itt_d_res <- coeftest(itt_d_model, vcov = vcovHC(itt_d_model, type = "HC1"))
print(itt_d_res)
install.packages(“AER”)
library(AER)
install.packages("AER")
library(AER)
iv_cace <- ivreg(financial_knowledge_score ~ programme_usage | assignment, data = dat)
summary(iv_cace, diagnostics = TRUE)
library(AER)
iv_cace <- ivreg(financial_knowledge_score ~ programme_usage | assignment, data = dat)
coeftest(iv_cace, vcov = vcovHC(cace_model, type = "HC1"))
library(AER)
iv_cace <- ivreg(financial_knowledge_score ~ programme_usage | assignment, data = dat)
coeftest(iv_cace, vcov = vcovHC(iv_cace, type = "HC1"))
hyde <- read.csv("hyde.csv")
itt_hyde <- lm(invalid ~ assignment, data = hyde)
hyde <- read.csv("hyde.csv")
# ITT: effect of being assigned to observation (sample) on invalid ballots
library(lmtest)
library(sandwich)
itt_hyde <- lm(invalid_ballots ~ sample, data = hyde)
coeftest(itt_hyde, vcov = vcovHC(itt_hyde, type = "HC1"))
# CACE: IV regression using sample as instrument for actual observation
library(AER)
cace_hyde <- ivreg(invalid_ballots ~ observed | sample, data = hyde)
coeftest(cace_hyde, vcov = vcovHC(cace_hyde, type = "HC1"))
hyde <- read.csv("hyde.csv")
# ITT: effect of being assigned to observation (sample) on invalid ballots
library(lmtest)
library(sandwich)
itt_hyde <- lm(invalid_ballots ~ sample, data = hyde)
coeftest(itt_hyde, vcov = vcovHC(itt_hyde, type = "HC1"))
# CACE: IV regression using sample as instrument for actual observation
library(AER)
cace_hyde <- ivreg(invalid_ballots ~ observed | sample, data = hyde)
coeftest(cace_hyde, vcov = vcovHC(cace_hyde, type = "HC1"))
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
dat_hyde <- transform(
dat_hyde,
Z = as.numeric(sample),            # assignment to observation
D = as.numeric(observed),          # actually observed
Y = as.numeric(invalid_ballots)    # outcome
)
# ITT: effect of assignment on invalid ballots
mod_itt <- lm(Y ~ Z, data = dat_hyde)
coeftest(mod_itt, vcov. = vcovHC(mod_itt, type = "HC1"))
# First stage: effect of assignment on being observed
mod_fs <- lm(D ~ Z, data = dat_hyde)
coeftest(mod_fs, vcov. = vcovHC(mod_fs, type = "HC1"))
# IV / CACE: instrument D with Z
mod_iv <- ivreg(Y ~ D | Z, data = dat_hyde)
coeftest(mod_iv, vcov. = vcovHC(mod_iv, type = "HC1"))
# Wald check: ITT / first-stage
wald_cace <- coef(mod_itt)["Z"] / coef(mod_fs)["Z"]
cat(sprintf("\nWald CACE check: %.4f\n", wald_cace))
# IV / CACE: instrument D with Z
mod_iv <- ivreg(Y ~ D | Z, data = dat_hyde)
coeftest(mod_iv, vcov. = vcovHC(mod_iv, type = "HC1"))
# Wald check: ITT / first-stage
wald_cace <- coef(mod_itt)["Z"] / coef(mod_fs)["Z"]
cat(sprintf("\nWald CACE check: %.4f\n", wald_cace))
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
dat_hyde <- transform(
dat_hyde,
Z = as.numeric(sample),            # assignment to observation
D = as.numeric(observed),          # actually observed
Y = as.numeric(invalid_ballots)    # outcome
)
# ITT: effect of assignment on invalid ballots
mod_itt <- lm(Y ~ Z, data = dat_hyde)
coeftest(mod_itt, vcov. = vcovHC(mod_itt, type = "HC1"))
# First stage: effect of assignment on being observed
mod_fs <- lm(D ~ Z, data = dat_hyde)
coeftest(mod_fs, vcov. = vcovHC(mod_fs, type = "HC1"))
set.seed(2025)
Z <- as.integer(hyde$sample)
Y <- as.numeric(hyde$invalid_ballots)
# observed test statistic: difference in means
t_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# permutation distribution under Fisher's sharp null
B <- 10000
t_sim <- replicate(B, {
Z_perm <- sample(Z)
mean(Y[Z_perm == 1]) - mean(Y[Z_perm == 0])
})
# two-sided randomization p-value
p_ri <- mean(abs(t_sim) >= abs(t_obs))
c(ITT_diff_in_means = t_obs, RI_p_value = p_ri)
set.seed(2003)
Z <- as.integer(hyde$sample)
Y <- as.numeric(hyde$invalid_ballots)
# observed test statistic: difference in means
t_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# permutation distribution under Fisher's sharp null
B <- 10000
t_sim <- replicate(B, {
Z_perm <- sample(Z)
mean(Y[Z_perm == 1]) - mean(Y[Z_perm == 0])
})
# two-sided randomization p-value
p_ri <- mean(abs(t_sim) >= abs(t_obs))
c(ITT_diff_in_means = t_obs, RI_p_value = p_ri)
set.seed(2003)
d <- read.csv("hyde.csv")
Y <- as.numeric(d$invalid_ballots)
Z <- as.integer(d$sample)
n  <- length(Z)
n1 <- sum(Z == 1)
# observed ITT
itt_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# compute diff-in-means for a permuted assignment with n1 treated
diff_means <- function() {
tr_idx <- sample.int(n, n1, replace = FALSE)
y1 <- mean(Y[tr_idx])
y0 <- mean(Y[-tr_idx])
y1 - y0
}
B <- 10000
itt_perm <- replicate(B, diff_means())
# two-sided p-value
p_two <- mean(abs(itt_perm) >= abs(itt_obs))
data.frame(
ITT_observed = itt_obs,
p_value_two_sided = p_two,
perm_mean = mean(itt_perm),
perm_sd = sd(itt_perm)
)
set.seed(2003)
d <- read.csv("hyde.csv")
Y <- as.numeric(d$invalid_ballots)
Z <- as.integer(d$sample)
n  <- length(Z)
n1 <- sum(Z == 1)
# observed ITT
itt_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# compute diff-in-means for a permuted assignment with n1 treated
diff_means <- function() {
tr_idx <- sample.int(n, n1, replace = FALSE)
y1 <- mean(Y[tr_idx])
y0 <- mean(Y[-tr_idx])
y1 - y0
}
B <- 10000
itt_perm <- replicate(B, diff_means())
# two-sided p-value
p_two <- mean(abs(itt_perm) >= abs(itt_obs))
data.frame(
ITT_observed = itt_obs,
p_value_two_sided = p_two,
perm_mean = mean(itt_perm),
perm_sd = sd(itt_perm)
)
set.seed(2003)
d <- read.csv("hyde.csv")
Y <- as.numeric(d$invalid_ballots)
Z <- as.integer(d$sample)
n  <- length(Z)
n1 <- sum(Z == 1)
# observed ITT
itt_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# compute diff-in-means for a permuted assignment with n1 treated
diff_means <- function() {
tr_idx <- sample.int(n, n1, replace = FALSE)
y1 <- mean(Y[tr_idx])
y0 <- mean(Y[-tr_idx])
y1 - y0
}
B <- 10000
itt_perm <- replicate(B, diff_means())
# two-sided p-value
p_two <- mean(abs(itt_perm) >= abs(itt_obs))
data.frame(
ITT_observed = itt_obs,
p_value_two_sided = p_two,
perm_mean = mean(itt_perm),
perm_sd = sd(itt_perm)
)
set.seed(2003)
d <- read.csv("hyde.csv")
Y <- as.numeric(d$invalid_ballots)
Z <- as.integer(d$sample)
n  <- length(Z)
n1 <- sum(Z == 1)
# observed ITT
itt_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# compute diff-in-means for a permuted assignment with n1 treated
diff_means <- function() {
tr_idx <- sample.int(n, n1, replace = FALSE)
y1 <- mean(Y[tr_idx])
y0 <- mean(Y[-tr_idx])
y1 - y0
}
B <- 10000
itt_perm <- replicate(B, diff_means())
# two-sided p-value
p_two <- mean(abs(itt_perm) >= abs(itt_obs))
data.frame(
ITT_observed = itt_obs,
p_value_two_sided = p_two,
perm_mean = mean(itt_perm),
perm_sd = sd(itt_perm)
)
set.seed(2050)
d <- read.csv("hyde.csv")
Y <- as.numeric(d$invalid_ballots)
Z <- as.integer(d$sample)
n  <- length(Z)
n1 <- sum(Z == 1)
# observed ITT
itt_obs <- mean(Y[Z == 1]) - mean(Y[Z == 0])
# compute diff-in-means for a permuted assignment with n1 treated
diff_means <- function() {
tr_idx <- sample.int(n, n1, replace = FALSE)
y1 <- mean(Y[tr_idx])
y0 <- mean(Y[-tr_idx])
y1 - y0
}
B <- 10000
itt_perm <- replicate(B, diff_means())
# two-sided p-value
p_two <- mean(abs(itt_perm) >= abs(itt_obs))
data.frame(
ITT_observed = itt_obs,
p_value_two_sided = p_two,
perm_mean = mean(itt_perm),
perm_sd = sd(itt_perm)
)
install.packages("rmarkdown")   # once
rmarkdown::render("05-assignment.Rmd", output_format = "html_document")
install.packages("rmarkdown")
# packages
suppressPackageStartupMessages({
library(lmtest)
library(sandwich)
})
dat <- read.csv("financial.csv", stringsAsFactors = FALSE)
dat$assignment <- as.numeric(dat$assignment)
# ITT model: outcome on randomized assignment
fit_itt <- lm(financial_knowledge_score ~ assignment, data = dat)
# heteroskedasticity-robust inference (HC1)
rob_vcov <- vcovHC(fit_itt, type = "HC1")
rob_tab  <- coeftest(fit_itt, vcov. = rob_vcov)
print(rob_tab)
# extract effect and summarize
b  <- unname(coef(fit_itt)["assignment"])
se <- sqrt(diag(rob_vcov))["assignment"]
z  <- qnorm(0.975)
lo <- b - z*se
hi <- b + z*se
p  <- rob_tab["assignment", "Pr(>|t|)"]
cat("\nInterpretation (ITT of assignment on financial knowledge score):\n")
cat(
sprintf(
"I estimate that being assigned an offer to the programme increases the test score by %.2f points on average (robust SE = %.2f, 95%% CI [%.2f, %.2f], p = %.4g).\n",
b, se, lo, hi, p
)
)
grp_means <- aggregate(financial_knowledge_score ~ assignment, dat, mean)
colnames(grp_means) <- c("assignment","mean_score")
print(grp_means)
itt_d_model <- lm(programme_usage ~ assignment, data = dat)
# heteroskedasticity-robust SEs
itt_d_res <- coeftest(itt_d_model, vcov = vcovHC(itt_d_model, type = "HC1"))
print(itt_d_res)
library(AER)
iv_cace <- ivreg(financial_knowledge_score ~ programme_usage | assignment, data = dat)
coeftest(iv_cace, vcov = vcovHC(iv_cace, type = "HC1"))
hyde <- read.csv("hyde.csv")
# ITT: effect of being assigned to observation (sample) on invalid ballots
library(lmtest)
library(sandwich)
itt_hyde <- lm(invalid_ballots ~ sample, data = hyde)
coeftest(itt_hyde, vcov = vcovHC(itt_hyde, type = "HC1"))
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
library(tidyverse)
hyde <- read.csv("hyde.csv")
# ITT: effect of being assigned to observation (sample) on invalid ballots
library(lmtest)
library(sandwich)
itt_hyde <- lm(invalid_ballots ~ sample, data = hyde)
coeftest(itt_hyde, vcov = vcovHC(itt_hyde, type = "HC1"))
hyde <- read.csv("hyde.csv")
# ITT: effect of being assigned to observation (sample) on invalid ballots
library(lmtest)
library(sandwich)
itt_hyde <- lm(invalid_ballots ~ sample, data = hyde)
coeftest(itt_hyde, vcov = vcovHC(itt_hyde, type = "HC1"))
library(tidyverse)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
dat_hyde <- transform(
dat_hyde,
Z = as.numeric(sample),            # assignment to observation
D = as.numeric(observed),          # actually observed
Y = as.numeric(invalid_ballots)    # outcome
)
# ITT: effect of assignment on invalid ballots
mod_itt <- lm(Y ~ Z, data = dat_hyde)
coeftest(mod_itt, vcov. = vcovHC(mod_itt, type = "HC1"))
# First stage: effect of assignment on being observed
mod_fs <- lm(D ~ Z, data = dat_hyde)
coeftest(mod_fs, vcov. = vcovHC(mod_fs, type = "HC1"))
# IV / CACE: instrument D with Z
mod_iv <- ivreg(Y ~ D | Z, data = dat_hyde)
coeftest(mod_iv, vcov. = vcovHC(mod_iv, type = "HC1"))
# Wald check: ITT / first-stage
wald_cace <- coef(mod_itt)["Z"] / coef(mod_fs)["Z"]
cat(sprintf("\nWald CACE check: %.4f\n", wald_cace))
library(tidyverse)
# Hyde (2010) subset: ITT and CACE with slightly different variable names
dat_hyde <- read_csv("hyde.csv", show_col_types = FALSE)
dat_hyde <- transform(
dat_hyde,
Z = as.numeric(sample),            # assignment to observation
D = as.numeric(observed),          # actually observed
Y = as.numeric(invalid_ballots)    # outcome
)
# ITT: effect of assignment on invalid ballots
mod_itt <- lm(Y ~ Z, data = dat_hyde)
coeftest(mod_itt, vcov. = vcovHC(mod_itt, type = "HC1"))
# First stage: effect of assignment on being observed
mod_fs <- lm(D ~ Z, data = dat_hyde)
coeftest(mod_fs, vcov. = vcovHC(mod_fs, type = "HC1"))
